trigger:
  branches:
    include:
      - devbranch
      - master
# pr: branches: include: - devbranch
variables:
  - group: project-variablesCI-CD
stages:
  - stage: BuildAndTest
    displayName: "Build and Test"
    condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'devbranch'))
    jobs:
      - job: buildjob
        pool:
          vmImage: "windows-latest"
        steps:
          - checkout: self
            fetchDepth: 0

          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "6.0.x"

          - task: NuGetToolInstaller@1

          # - script: dotnet restore WebApp/WebApp.csproj
          #   displayName: "Restore WebApp"
          - task: NuGetCommand@2
            inputs:
              command: "restore"
              restoreSolution: "**/*.sln"

          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: "SonarQubeServiceConnection" # Create this service connection in Azure DevOps
              organization: "yagjnasri97-2"
              scannerMode: "dotnet"
              projectKey: "yagjnasri97_CI-CDwithSonarcloudYml"
              projectName: "CI-CDwithSonarcloudYml"
          #              extraProperties: |
          #                sonar.exclusions=**/bin/**,**/obj/**
          #                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml

          - script: dotnet build WebApp/WebApp.csproj --configuration Release
            displayName: "Build"

          - script: dotnet test WebApp.UnitTest/WebApp.UnitTest.csproj --configuration Release --collect:"XPlat Code Coverage"
            displayName: "Run Unit Tests Only"
          #above script or this use  - script: dotnet test ./YourApp.sln --configuration Release --collect:"XPlat Code Coverage"
          #    displayName: "Run Tests"

          - task: SonarCloudAnalyze@3
            displayName: "Run SonarQube Analysis"

          #          - script: dotnet build ./WebApp/WebApp.csproj --configuration Release
          #            displayName: "Build App without SQL project"

          - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@3
            inputs:
              pollingTimeoutSec: "300"

          - script: dotnet publish WebApp/WebApp.csproj -c Release -o $(Build.ArtifactStagingDirectory)
            displayName: "Publish WebApp Only"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"
    # ---------- INFRA STAGE ----------
  - stage: TerraformDeploy
    displayName: "Terraform Infra Deploy"
    dependsOn: BuildAndTest
    condition: eq(variables['Build.SourceBranchName'], 'master')
    jobs:
      - job: Terraform
        displayName: "Provision Web App with Terraform"
        pool:
          vmImage: ubuntu-latest
        variables:
          solution: "**/*.sln"
          buildPlatform: "Any CPU"
          buildConfiguration: "Release"

        steps:
          - script: |
              echo "Install Terraform v1.8.2 manually."
              # Install Terraform v1.8.2 manually
              sudo apt-get update && sudo apt-get install -y wget unzip
              wget https://releases.hashicorp.com/terraform/1.8.2/terraform_1.8.2_linux_amd64.zip
              unzip terraform_1.8.2_linux_amd64.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: "Command Line Script"
          - script: |
              export ARM_ACCESS_KEY=$(ARM_ACCESS_KEY)

              echo "terraform commands init"
              terraform init

            displayName: "Command Line Script"
          - script: |
              echo "I am going now terraform commands"

              terraform plan -out=tfplan
              terraform apply -auto-approve tfplan

            displayName: "Command Line Script"
          - task: CopyFiles@2
            displayName: "Copy Files to: $(build.artifactstagingdirectory)"
            inputs:
              SourceFolder: "$(agent.builddirectory)"
              TargetFolder: "$(build.artifactstagingdirectory)"
          - script: |
              echo "⚠️ WARNING: Terraform destroy will run in 1800 seconds..."
              sleep 60

              echo "Starting Terraform Destroy..."
              terraform destroy -auto-approve

          # - task: PublishBuildArtifacts@1
          #   displayName: "Publish Artifact: drop"
  # ---------- CD STAGE ----------
  # - stage: DeployToWebApp
  #   displayName: "Deploy to Azure Web App"
  #   dependsOn: TerraformDeploy
  #   condition: eq(variables['Build.SourceBranchName'], 'master')
  #   jobs:
  #     - job: DeployWebApp
  #       #        environment: "production"
  #       pool:
  #         vmImage: "windows-latest"
  #       # strategy:
  #       #   runOnce:
  #       #     deploy:
  #       steps:
  #         # Download the published artifact from Stage 1
  #         - task: DownloadBuildArtifacts@0
  #           inputs:
  #             buildType: "current"
  #             downloadType: "single"
  #             artifactName: "drop" # same name you used in PublishBuildArtifacts
  #             downloadPath: "$(System.ArtifactsDirectory)"

  #         # Deploy to Azure WebApp
  #         - task: AzureWebApp@1
  #           displayName: "Deploy to AZwedapp1031"
  #           inputs:
  #             azureSubscription: "AzureSPConnection" # from project library
  #             appName: "AZwedapp1031" # your Terraform created web app name
  #             package: "$(System.ArtifactsDirectory)/drop/**/*.zip"
